import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Check environment variables
    if (!openAIApiKey) {
      console.error('Missing OPENAI_API_KEY environment variable');
      throw new Error('OpenAI API key not configured');
    }

    if (!supabaseUrl || !supabaseServiceKey) {
      console.error('Missing Supabase environment variables');
      throw new Error('Supabase not configured properly');
    }

    console.log('Environment check passed');

    // Get the authorization header
    const authHeader = req.headers.get('authorization');
    if (!authHeader) {
      console.error('No authorization header found');
      throw new Error('No authorization header');
    }

    console.log('Authorization header found');

    // Create Supabase client with service role key
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Get user from JWT token
    const token = authHeader.replace('Bearer ', '');
    console.log('Attempting to verify user token');
    
    const { data: { user }, error: authError } = await supabase.auth.getUser(token);
    
    if (authError || !user) {
      console.error('Authentication failed:', authError?.message);
      throw new Error('Invalid token or user not found');
    }

    console.log('User authenticated successfully:', user.id);

    // Check and decrement caption credits
    console.log('Checking caption credits for user:', user.id);
    const { data: creditsData, error: creditsError } = await supabase.rpc('decrement_caption_credits', {
      user_id: user.id
    });

    if (creditsError) {
      console.error('Credits check failed:', creditsError);
      throw new Error('Failed to check caption credits');
    }

    console.log('Credits remaining after decrement:', creditsData);

    if (creditsData < 0) {
      console.log('User has no remaining credits');
      return new Response(JSON.stringify({ 
        error: 'Insufficient caption credits. You have reached your monthly limit.' 
      }), {
        status: 402,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Get brand information for the user
    console.log('Fetching brand information for user:', user.id);
    const { data: brandData, error: brandError } = await supabase
      .from('restaurants')
      .select('*')
      .eq('owner_id', user.id)
      .maybeSingle();

    if (brandError) {
      console.error('Error fetching brand data:', brandError);
      throw new Error('Failed to fetch brand information');
    }

    if (!brandData) {
      console.error('No brand data found for user:', user.id);
      throw new Error('Brand information not found. Please complete your brand setup first.');
    }

    console.log('Brand data retrieved:', brandData);

    const requestBody = await req.json();
    const { productName, price, description, contentType, contentCategory } = requestBody;
    
    console.log('Caption generation request:', { productName, price, description, contentType, contentCategory });

    // Prepare brand information for the prompt (shared across all brand types and content types)
    const brandName = brandData.name;
    const brandType = brandData.brand_type || 'other';
    const visionAndValues = brandData.vision || 'ุชูุฏูู ุฃูุถู ุชุฌุฑุจุฉ ููุนููุงุก';
    
    // Handle locations - combine primary location and additional locations
    let brandLocations = [brandData.location];
    if (brandData.additional_locations && brandData.additional_locations.length > 0) {
      brandLocations = brandLocations.concat(brandData.additional_locations);
    }
    
    // Handle "Other" location with custom input
    if (brandData.custom_location) {
      brandLocations = brandLocations.map(loc => 
        loc === 'Other' ? brandData.custom_location : loc
      );
    }
    
    const brandLocationsText = brandLocations.join('ุ ');
    
    // Handle restaurant category (only for restaurants)
    let restaurantCategory = '';
    if (brandType === 'restaurant') {
      if (brandData.category === 'other' && brandData.custom_category) {
        restaurantCategory = brandData.custom_category;
      } else {
        // Map category enum to Arabic
        const categoryMap = {
          'fast_food': 'ูุฌุจุงุช ุณุฑูุนุฉ',
          'casual_dining': 'ูุทุงุนู ุนุงุฆููุฉ',
          'fine_dining': 'ูุทุงุนู ุฑุงููุฉ',
          'middle_eastern': 'ูุฃูููุงุช ุดุฑู ุฃูุณุทูุฉ',
          'asian': 'ูุฃูููุงุช ุขุณูููุฉ',
          'italian': 'ูุฃูููุงุช ุฅูุทุงููุฉ',
          'american': 'ูุฃูููุงุช ุฃูุฑูููุฉ',
          'seafood': 'ูุฃูููุงุช ุจุญุฑูุฉ',
          'vegetarian': 'ูุฃูููุงุช ูุจุงุชูุฉ',
          'cafe': 'ูููู',
          'bakery': 'ูุฎุจุฒ',
          'other': 'ุฃุฎุฑู'
        };
        restaurantCategory = categoryMap[brandData.category] || brandData.category;
      }
    }

    // Map content categories to Arabic for better prompt context
    const contentCategoryMap = {
      'venue': 'ูุดุงูุฏ ูู ุงูููุงู',
      'busy': 'ูุญุธุงุช ูุฒุฏุญูุฉ',
      'preparation': 'ุทุฑููุฉ ุงูุชุญุถูุฑ',
      'atmosphere': 'ุฃุฌูุงุก ุนุงูุฉ',
      'behindScenes': 'ููุงููุณ ุงูุนูู',
      'customerMessages': 'ุฑุณุงุฆู ูู ุงูุนููุงุก',
      'educational': 'ูุญุชูู ุชุนูููู ุฃู ุชูุนูู',
      'events': 'ููุงุณุจุงุช ุฃู ูุนุงููุงุช',
      'announcement': 'ุฅุนูุงู ุฃู ุชูุจูู',
      'random': 'ุนุดูุงุฆู'
    };
    
    const contentCategoryArabic = contentCategoryMap[contentCategory] || contentCategory;

    // Select prompt template based on brand_type and content_type
    let prompt = '';
    
    if (brandType === 'restaurant') {
      if (contentType === 'product') {
        // โ Keep existing product prompt logic as-is
        prompt = `ุฃูุช ูุงุชุจ ูุญุชูู ูุญุชุฑู ูููุตุฉ TikTokุ ุชูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ุดุจุงุจู ูุนููู. ุงููุทููุจ ููู ูุชุงุจุฉ ูุตู ูุตูุฑ ูุฌุฐุงุจ ูููุดูุฑ ูุญุชูู ุนูู ุตูุฑุฉ ููุชุฌ ุบุฐุงุฆู ูู ูุทุนู ุณุนูุฏู.

    โฌ๏ธ ูุนูููุงุช ุนู ุงููุทุนู:
    - ุงุณู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${brandName}
    - ููุงูุน ุงููุฑูุน: ${brandLocationsText}
    - ููุน ุงููุทุนู ุฃู ุงููุฆุฉ: ${restaurantCategory}
    - ุฑุคูุฉ ูููู ุงููุทุนู: ${visionAndValues}

    โฌ๏ธ ูุนูููุงุช ุนู ุงูููุชุฌ:
    - ุงุณู ุงูููุชุฌ: ${productName}
    - ุงูุณุนุฑ (ุงุฎุชูุงุฑู): ${price} ุฑูุงู
    - ูุตู ุงูููุชุฌ: ${description}

    ๐ ุงูุชุนูููุงุช:
    - ุงูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ุทุจูุนู.
    - ุงูุชุจู ูู ุงูุงุฎุทุงุก ุงููุบููุฉ ูุงูุงููุงุฆูุฉ.
    - ุงุจุฏุฃ ุจุฌููุฉ ุชุดุฏ ุงูุงูุชุจุงูุ ุชุนุจุฑ ุนู ุงูุทุนู ุฃู ุงูุชุฌุฑุจุฉ ุจุฏูู ูุจุงูุบุฉ ุฃู ุชูุฑุงุฑ.
    - ุตู ุงูููุชุฌ ุจุทุฑููุฉ ุดููุฉ ููุบุฑูุฉ ูุน ุนุจุงุฑุงุช ุฏุงุฑุฌุฉ.
    - ุงูุชุจ ุงููุญุชูู ูุญุงูู ูููู ููุงุณุจ ูุน ุฑุคูุฉ ูููู ุงููุทุนู , ุจูู ูุฐุง ุงูุดูุก ุจุดูู ุบูุฑ ูุจุงุดุฑ.
    - ูุง ุชุฐูุฑ ุงูุณุนุฑ ุฅูุง ุฅุฐุง ุญุณูุช ุฅูู ูุญูุฒ (ูุซูุง ูููุฉ ุงููุทุนู ุงูู ููุฏู ููุชุฌุงุช ุจุฃุณุนุงุฑ ุชูุงูุณูุฉ).
    -  ุฃุญูุงูุง ุงุฐูุฑ ุงููููุน ุงู ุงูููุงูุน ูุงุญูุงูุง ูุง ุชุฐูุฑูุง.
    - ูุง ุชุณุชุฎุฏู ุนุจุงุฑุงุช ุบูุฑ ููุทููุฉ ุฃู ุบูุฑ ุฏุงุฑุฌุฉ ุจุงูููุฌุฉ.
    - ุงุฎุชู ุจูุฏุงุก ุฎููู.
    - ูุง ุชุฌุนููุง ุทูููุฉ ุฌุฏุง, ุงุฌุนููุง ูุณุท

    ๐ฏ ุงููุฏู: ูุต ูุญููุณ ููุดูู ุงููุงุฑุฆุ ููุนูุณ ูููุฉ ุงููุทุนู ููููุฉ ูุฑุ ุจุฃุณููุจ ููุฑุจู ูู ุงูุฌูููุฑ.`;
      } else if (contentType === 'general') {
        // ๐ New prompt for general content for restaurant
        prompt = `ุฃูุช ูุงุชุจ ูุญุชูู ูุญุชุฑู ูููุตุฉ TikTokุ ุชูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ุฌุฐุงุจ. ูุฐุง ุงูููุดูุฑ ูุง ูุญุชูู ุนูู ููุชุฌ ุจู ูุนูุณ ุฃุฌูุงุก ุงููุทุนู - ูุซู: ${contentCategoryArabic}.

โฌ๏ธ ูุนูููุงุช ุนู ุงููุทุนู:
- ุงุณู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${brandName}
- ููุงูุน ุงููุฑูุน: ${brandLocationsText}
- ููุน ุงููุทุนู ุฃู ุงููุฆุฉ: ${restaurantCategory}
- ุฑุคูุฉ ูููู ุงููุทุนู: ${visionAndValues}

โฌ๏ธ ูุตู ุงููุญุชูู (ุงุฎุชูุงุฑู):
${description || 'ูุง ููุฌุฏ ูุตู ุฅุถุงูู'}

๐ ุงูุชุนูููุงุช:
- ูุง ุชุฐูุฑ ููุชุฌ.
- ุตู ุงูุฃุฌูุงุก ุจุฃุณููุจ ุดุจุงุจู ูุฌุฐุงุจ.
- ุงุฑุจุท ุงููุญุชูู ุจูููุฉ ูุฑุคูุฉ ุงููุทุนู ุจุทุฑููุฉ ุบูุฑ ูุจุงุดุฑุฉ.
- ูุง ุชุฌุนู ุงููุต ุทููู.
- ุงุณุชุฎุฏู ุนุจุงุฑุงุช ุชููู ุงูุฅุญุณุงุณ ุจุฌู ุงููุทุนู.
- ุฃุญูุงูุง ุงุฐูุฑ ุงููููุน ุงู ุงูููุงูุน ูุงุญูุงูุง ูุง ุชุฐูุฑูุง.
- ุงุฎุชู ุจุฏุนูุฉ ุฎูููุฉ ููุฒูุงุฑุฉ.

๐ฏ ุงููุฏู: ููู ุงูุฅุญุณุงุณ ุจุฌู ุงููุทุนู ูุชุญููุฒ ุงููุชุงุจุน ููุฒูุงุฑุฉ.`;
      }
    } else if (brandType === 'coffee') {
      if (contentType === 'product') {
        // โ Existing coffee product prompt
        prompt = `ุฃูุช ูุงุชุจ ูุญุชูู ูุญุชุฑู ูููุตุฉ TikTokุ ูุชูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ุจุณูุท ูุฌุฐูุงุจ. ูุทููุจ ููู ุชูุชุจ ูุตู ูุตูุฑ ูุฌุฐูุงุจ ูููุดูุฑ ููู ุตูุฑุฉ ูุดุฑูุจ ุฃู ููุชุฌ ูู ูููู.

โฌ๏ธ 
ูุนูููุงุช ุนู ุงููููู:
- ุงุณู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${brandName}
- ููุงูุน ุงููุฑูุน: ${brandLocationsText}
- ุฑุคูุฉ ูููู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${visionAndValues}

โฌ๏ธ 
ูุนูููุงุช ุนู ุงูููุชุฌ:
- ุงุณู ุงูููุชุฌ: ${productName}
- ุงูุณุนุฑ (ุงุฎุชูุงุฑู): ${price} ุฑูุงู
- ูุตู ุงูููุชุฌ: ${description}

๐ 
ุงูุชุนูููุงุช:
- ุงูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ุทุจูุนู .
- ุงุจุฏุฃ ุจุฌููุฉ ูููุชุฉ (ูููู ุชููู ุนู ุงูุทุนูุ ุงูุฅุญุณุงุณุ ุฃู ุงููุฒุงุฌ) ุจุฏูู ูุจุงูุบุฉ ุฃู ุชูุฑุงุฑ.
- ุตู ูููุฉ ุฃู ุชุฌุฑุจุฉ ุงููุดุฑูุจ ุจูููุงุช ุจุณูุทุฉ ูุฃูููุฉ.
- ุงุฑุจุท ุชุฌุฑุจุฉ ุงูููุชุฌ ุจุฑุคูุฉ ุงููููู ุจุดูู ุบูุฑ ูุจุงุดุฑ ูุงุญุชุฑุงูู.
- ูุง ุชุฐูุฑ ุงูุณุนุฑ ุฅูุง ุฅุฐุง ูุงู ูุถูู ูููุฉ ุฃู ูุญููุณ ุงูุฒุจูู.
- ุฃุญูุงูุง ุงุฐูุฑ ุงููููุน ุงู ุงูููุงูุน ูุงุญูุงูุง ูุง ุชุฐูุฑูุง.
- ุงุฎุชู ุจุฌููุฉ ุชุดุฌูุนูุฉ ุฎูููุฉ.
- ูุง ุชุฌุนููุง ุทูููุฉ ุฌุฏุง, ุงุฌุนููุง ูุณุท

๐ฏ 
ุงููุฏู: ูุชุงุจุฉ ูุตู ูุดุฏ ุงูุงูุชุจุงูุ ูุนูุณ ุฃุณููุจ ุงูููููุ ููุดุฌุน ุนูู ุงูุชุฌุฑุจุฉ ุจุทุฑููุฉ ูุฏูุฏุฉ ูุดุจุงุจูุฉ.`;
      } else if (contentType === 'general') {
        // ๐ New coffee general content prompt
        prompt = `ุฃูุช ูุงุชุจ ูุญุชูู ูุญุชุฑู ูููุตุฉ TikTokุ ุชูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ุฌุฐุงุจ. ูุฐุง ุงูููุดูุฑ ูุฑูุฒ ุนูู ุงููุฏูุก ูุงูุฃุฌูุงุก ูุชุฌุฑุจุฉ ุงูุฒุจุงุฆู ูู ุงููููู - ูุซู: ${contentCategoryArabic}.

โฌ๏ธ ูุนูููุงุช ุนู ุงููููู:
- ุงุณู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${brandName}
- ููุงูุน ุงููุฑูุน: ${brandLocationsText}
- ุฑุคูุฉ ูููู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${visionAndValues}

โฌ๏ธ ูุตู ุงููุญุชูู (ุงุฎุชูุงุฑู):
${description || 'ูุง ููุฌุฏ ูุตู ุฅุถุงูู'}

๐ ุงูุชุนูููุงุช:
- ูุง ุชุฐูุฑ ููุชุฌ ูุญุฏุฏ.
- ุตู ุงูุฃุฌูุงุก ูุงููุฏูุก ูุงูุฑุงุญุฉ ูู ุงููููู.
- ุงุฑุจุท ุงููุญุชูู ุจุชุฌุฑุจุฉ ุงูุฒุจุงุฆู ูุฑุคูุฉ ุงููููู ุจุทุฑููุฉ ุบูุฑ ูุจุงุดุฑุฉ.
- ุงุณุชุฎุฏู ูููุงุช ุชููู ุงูุดุนูุฑ ุจุงูุฑุงุญุฉ ูุงูุงุณุชูุชุงุน.
- ุฃุญูุงูุง ุงุฐูุฑ ุงููููุน ุงู ุงูููุงูุน ูุงุญูุงูุง ูุง ุชุฐูุฑูุง.
- ุงุฎุชู ุจุฏุนูุฉ ุฎูููุฉ ูุชุฌุฑุจุฉ ุงููููู.
- ูุง ุชุฌุนู ุงููุต ุทููู.

๐ฏ ุงููุฏู: ููู ุงูุฅุญุณุงุณ ุจุฃุฌูุงุก ุงููููู ุงููุงุฏุฆุฉ ูุชุญููุฒ ุงููุชุงุจุน ููุฒูุงุฑุฉ.`;
      }
    } else if (brandType === 'bakery') {
      if (contentType === 'product') {
        // โ Existing bakery product prompt
        prompt = `ุฃูุช ูุงุชุจ ูุญุชูู ูุญุชุฑู ูููุตุฉ TikTokุ ูุชูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ุจุณูุท ูุฌุฐูุงุจ. ูุทููุจ ููู ุชูุชุจ ูุตู ูุตูุฑ ูุฌุฐูุงุจ ูููุดูุฑ ููู ุตูุฑุฉ ุญูุง ุฃู ููุชุฌ ูู ูุญู ุญูููุงุช ุฃู ูุฎุจูุฒุงุช.


ูุนูููุงุช ุงููุดุงุท ุงูุชุฌุงุฑู:
- ุงุณู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${brandName}
- ููุงูุน ุงููุฑูุน: ${brandLocationsText}
- ุฑุคูุฉ ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${visionAndValues}

ูุนูููุงุช ุงูููุชุฌ:
- ุงุณู ุงูููุชุฌ: ${productName}
- ุงูุณุนุฑ: ${price} ุฑูุงู
- ูุตู ุงูููุชุฌ: ${description}


๐ 
ุงูุชุนูููุงุช:
- ุงูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ุทุจูุนู .
- ุงุจุฏุฃ ุจุฌููุฉ ูุบุฑูุฉ ุชูุชุญ ุงูุดููุฉ , ุจุฏูู ูุจุงูุบุฉ ุฃู ุชูุฑุงุฑ.
- ุตู ุงููุฐุงู ูุงูููููุงุช ุจูููุงุช ุชุญุฑู ุงูุญูุงุณ.
- ุงุฑุจุท ุชุฌุฑุจุฉ ุงูููุชุฌ ุจุฑุคูุฉ ุงููุญู ุจุดูู ุบูุฑ ูุจุงุดุฑ ูุงุญุชุฑุงูู.
- ูุง ุชุฐูุฑ ุงูุณุนุฑ ุฅูุง ุฅุฐุง ูุงู ูุถูู ูููุฉ ุฃู ูุญููุณ ุงูุฒุจูู.
- ุฃุญูุงูุง ุงุฐูุฑ ุงููููุน ุงู ุงูููุงูุน ูุงุญูุงูุง ูุง ุชุฐูุฑูุง.
- ุงุฎุชู ุจุฌููุฉ ุชุดุฌูุนูุฉ ุฎูููุฉ.
- ูุง ุชุฌุนููุง ุทูููุฉ ุฌุฏุง, ุงุฌุนููุง ูุณุท


๐ฏ 
ุงููุฏู: ูุต ูุดููู ุงููุงุฑุฆ ููุนูุณ ูููุฉ ุงููุญู ููุญูุณู ููุชุฌุฑุจุฉ.`;
      } else if (contentType === 'general') {
        // ๐ New bakery general content prompt
        prompt = `ุฃูุช ูุงุชุจ ูุญุชูู ูุญุชุฑู ูููุตุฉ TikTokุ ุชูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ุฌุฐุงุจ. ูุฐุง ุงูููุดูุฑ ูุตู ุงูุฑุงุฆุญุฉ ูุงูุฃููุงู ูุงูุฏูููุฑ ูู ุงููุฎุจุฒ - ูุซู: ${contentCategoryArabic}.

โฌ๏ธ ูุนูููุงุช ุนู ุงููุฎุจุฒ:
- ุงุณู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${brandName}
- ููุงูุน ุงููุฑูุน: ${brandLocationsText}
- ุฑุคูุฉ ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${visionAndValues}

โฌ๏ธ ูุตู ุงููุญุชูู (ุงุฎุชูุงุฑู):
${description || 'ูุง ููุฌุฏ ูุตู ุฅุถุงูู'}

๐ ุงูุชุนูููุงุช:
- ูุง ุชุฐูุฑ ููุชุฌ ูุญุฏุฏ.
- ุตู ุงูุฑุงุฆุญุฉ ุงูุฒููุฉ ูุงูุฃููุงู ุงูุฌูููุฉ ูุงูุฃุฌูุงุก ูู ุงููุฎุจุฒ.
- ุงุฑุจุท ุงููุญุชูู ุจุชุฌุฑุจุฉ ุงูุฒุจุงุฆู ูุฑุคูุฉ ุงููุฎุจุฒ ุจุทุฑููุฉ ุบูุฑ ูุจุงุดุฑุฉ.
- ุงุณุชุฎุฏู ูููุงุช ุชุญุฑู ุงูุญูุงุณ (ุงูุจุตุฑ ูุงูุดู).
- ุฃุญูุงูุง ุงุฐูุฑ ุงููููุน ุงู ุงูููุงูุน ูุงุญูุงูุง ูุง ุชุฐูุฑูุง.
- ุงุฎุชู ุจุฏุนูุฉ ุฎูููุฉ ูุชุฌุฑุจุฉ ุงููุฎุจุฒ.
- ูุง ุชุฌุนู ุงููุต ุทููู.

๐ฏ ุงููุฏู: ููู ุงูุฅุญุณุงุณ ุจุฃุฌูุงุก ุงููุฎุจุฒ ุงูุดููุฉ ูุชุญููุฒ ุงููุชุงุจุน ููุฒูุงุฑุฉ.`;
      }
    } else {
      // brand_type === 'other' or any other value
      const customBrandType = brandData.custom_brand_type;
      
      if (contentType === 'product') {
        // โ Existing other brand product prompt
        prompt = `ุฃูุช ูุงุชุจ ูุญุชูู ูููุตุฉ TikTokุ ูุชูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ูุงุถุญ ูุฌุฐูุงุจ. ูููุชู ูุชุงุจุฉ ูุตู ูุตูุฑ ููุดููู ูุตูุฑุฉ ููุชุฌ ูู ุนูุงูุฉ ุชุฌุงุฑูุฉ ุชุนูู ูู ูุฌุงู ${customBrandType}.

โฌ๏ธ
 ูุนูููุงุช ุงููุดุงุท ุงูุชุฌุงุฑู:
- ุงุณู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${brandName}
- ููุงูุน ุงููุฑูุน: ${brandLocationsText}
ููุน ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ (ุงููุฌุงู) : ${customBrandType}
- ุฑุคูุฉ ูููู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${visionAndValues}

โฌ๏ธ
 ูุนูููุงุช ุงูููุชุฌ:
- ุงุณู ุงูููุชุฌ: ${productName}
- ุงูุณุนุฑ (ุงุฎุชูุงุฑู): ${price} ุฑูุงู
- ูุตู ุงูููุชุฌ: ${description}

๐ 
ุงูุชุนูููุงุช:
- ุงูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ุทุจูุนู
- ุงุจุฏุฃ ุจุฌููุฉ ุชูุถุญ ูุงุฆุฏุฉ ุงูููุชุฌ ุจุดูู ูุจุงุดุฑ ููุบุฑู.
- ุตู ุงูููุชุฌ ุจุทุฑููุฉ ูุฎุชุตุฑุฉ ุชูุถุญ ุงุณุชุฎุฏุงูู ุฃู ุชูููุฒู ุจูุบุฉ ุณููุฉ ููุงุถุญุฉ.
- ุงุฑุจุท ุชุฌุฑุจุฉ ุงูููุชุฌ ุงู ุงูุฎุฏูุฉ ุจุฑุคูุฉ ุงููุญู ุจุดูู ุบูุฑ ูุจุงุดุฑ ูุงุญุชุฑุงูู.
- ูุง ุชุฐูุฑ ุงูุณุนุฑ ุฅูุง ุฅุฐุง ูุงู ูุญููุฒ ููุดุฑุงุก ุฃู ุงูุชุฌุฑุจุฉ.
- ุฃุญูุงูุง ุงุฐูุฑ ููุงูุน ุงููุฑูุน ุงู ุงููููุน ุงูุงููุชุฑููู ุฅู ูุฌุฏ ูุงุญูุงูุง ูุง ุชุฐูุฑูุง.
- ุงุฎุชู ุจุฏุนูุฉ ุฎูููุฉ ููุชุฌุฑุจุฉ ุฃู ุงูุชูุงุนู.
- ูุง ุชุฌุนููุง ุทูููุฉ ุฌุฏุง, ูู ุฌููุฉ ุงูู 4 ุฌูู ูุฃูุตู ุญุฏ.
- ูุง ุชุฌุนููุง ุทูููุฉ ุฌุฏุง, ุงุฌุนููุง ูุณุท

๐ฏ 
ุงููุฏู: ูุชุงุจุฉ ูุตู ูุนูุณ ูุงุฆุฏุฉ ุงูููุชุฌุ ููููุน ุงููุชุงุจุน ุจุทุฑููุฉ ุบูุฑ ูููุฉ ุฃู ุฑุณููุฉ.`;
      } else if (contentType === 'general') {
        // ๐ New general content prompt for other brand types
        prompt = `ุฃูุช ูุงุชุจ ูุญุชูู ูุญุชุฑู ูููุตุฉ TikTokุ ุชูุชุจ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุจุฃุณููุจ ุฌุฐุงุจ. ูุฐุง ุงูููุดูุฑ ูุณุชุฎุฏู storytelling ุนุงู ุญูู ุชุฌุฑุจุฉ ุงูุนููุงุก ูู ${customBrandType} - ูุซู: ${contentCategoryArabic}.

โฌ๏ธ ูุนูููุงุช ุงููุดุงุท ุงูุชุฌุงุฑู:
- ุงุณู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${brandName}
- ููุงูุน ุงููุฑูุน: ${brandLocationsText}
- ููุน ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ (ุงููุฌุงู): ${customBrandType}
- ุฑุคูุฉ ูููู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ: ${visionAndValues}

โฌ๏ธ ูุตู ุงููุญุชูู (ุงุฎุชูุงุฑู):
${description || 'ูุง ููุฌุฏ ูุตู ุฅุถุงูู'}

๐ ุงูุชุนูููุงุช:
- ูุง ุชุฐูุฑ ููุชุฌ ูุญุฏุฏ.
- ุงุฑูู ูุตุฉ ุจุณูุทุฉ ุญูู ุชุฌุฑุจุฉ ุงูุนููุงุก ุฃู ุฃุฌูุงุก ุงูููุงู.
- ุงุฑุจุท ุงููุญุชูู ุจูููุฉ ูุฑุคูุฉ ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ ุจุทุฑููุฉ ุบูุฑ ูุจุงุดุฑุฉ.
- ุงุณุชุฎุฏู ุฃุณููุจ ููุงุณุจ ุทุจูุนุฉ ุงููุฌุงู (${customBrandType}).
- ุฃุญูุงูุง ุงุฐูุฑ ุงููููุน ุงู ุงูููุงูุน ูุงุญูุงูุง ูุง ุชุฐูุฑูุง.
- ุงุฎุชู ุจุฏุนูุฉ ุฎูููุฉ ููุชุฌุฑุจุฉ ุฃู ุงูุชูุงุนู.
- ูุง ุชุฌุนู ุงููุต ุทููู.

๐ฏ ุงููุฏู: ููู ุชุฌุฑุจุฉ ุฅูุฌุงุจูุฉ ูุชุญููุฒ ุงููุชุงุจุน ููุชูุงุนู ูุน ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ.`;
      }
    }

    console.log('Using prompt template for brand type:', brandType, 'and content type:', contentType);
    console.log('Generated prompt:', prompt);

    console.log('Calling OpenAI API...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: 'You are a professional social media content creator specializing in TikTok captions for brands in Saudi Arabia. Generate engaging, authentic Arabic captions that reflect the brand identity and appeal to the Saudi audience.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 300,
        temperature: 0.8,
      }),
    });

    console.log('OpenAI API response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error:', response.status, errorText);
      throw new Error(`OpenAI API error: ${response.statusText} - ${errorText}`);
    }

    const data = await response.json();
    const caption = data.choices[0].message.content;

    console.log('Caption generated successfully:', caption);

    return new Response(JSON.stringify({ 
      caption,
      remainingCredits: creditsData 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in generate-caption function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
